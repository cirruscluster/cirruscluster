#!/usr/bin/python
# -*- coding: utf-8 -*-

# (c) 2012, Matt Wright <matt@nobien.net>
#
# This file is part of Ansible
#
# Ansible is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# Ansible is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with Ansible.  If not, see <http://www.gnu.org/licenses/>.
#

DOCUMENTATION = '''
---
module: easy_install
short_description: Installs Python libraries
description:
     - Installs Python libraries, optionally in a I(virtualenv)
version_added: "0.7"
options:
  name:
    description:
      - A Python library name
    required: true
    default: null
    aliases: []
  virtualenv:
    description:
      - an optional I(virtualenv) directory path to install into. If the
        I(virtualenv) does not exist, it is created automatically
    required: false
    default: null
examples:
   - code: "easy_install: name=pip"
     description: "Examples from Ansible Playbooks"
   - code: "easy_install: name=flask virtualenv=/webapps/myapp/venv"
     description: "Install I(Flask) (U(http://flask.pocoo.org/)) into the specified I(virtualenv)"
notes:
    - Please note that the M(easy_install) module can only install Python
      libraries. Thus this module is not able to remove libraries. It is
      generally recommended to use the M(pip) module which you can first install
      using M(easy_install).
    - Also note that I(virtualenv) must be installed on the remote host if the
      C(virtualenv) parameter is specified.
requirements: [ "virtualenv" ]
author: Matt Wright
'''

def _ensure_virtualenv(module, env, virtualenv):
    if os.path.exists(os.path.join(env, 'bin', 'activate')):
        return 0, '', ''
    else:
        return module.run_command('%s %s' % (virtualenv, env))


def _is_package_installed(module, name, easy_install):
    cmd = '%s --dry-run %s' % (easy_install, name)
    rc, status_stdout, status_stderr = module.run_command(cmd)
    return not ('Reading' in status_stdout or 'Downloading' in status_stdout)


def main():
    arg_spec = dict(
        name=dict(required=True),
        virtualenv=dict(default=None, required=False)
    )

    module = AnsibleModule(argument_spec=arg_spec)

    name = module.params['name']
    env = module.params['virtualenv']
    easy_install = module.get_bin_path('easy_install', True, ['%s/bin' % env])

    rc = 0
    err = ''
    out = ''

    if env:
        virtualenv = module.get_bin_path('virtualenv', True)
        if virtualenv is None:
            module.fail_json(msg='virtualenv is not installed')

        rc_venv, out_venv, err_venv = _ensure_virtualenv(module, env, virtualenv)

        rc += rc_venv
        out += out_venv
        err += err_venv

    cmd = None
    changed = False
    installed = _is_package_installed(module, name, easy_install)

    if not installed:
        cmd = '%s %s' % (easy_install, name)
        rc_pip, out_pip, err_pip = module.run_command(cmd)

        rc += rc_pip
        out += out_pip
        err += err_pip

        changed = True

    if rc != 0:
        module.fail_json(msg=err, cmd=cmd)

    module.exit_json(changed=changed, binary=easy_install,
                     name=name, virtualenv=env)

# this is magic, see lib/ansible/module_common.py
#<<INCLUDE_ANSIBLE_MODULE_COMMON>>

main()
